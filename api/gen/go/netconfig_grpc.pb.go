// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v3.21.12
// source: netconfig.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	NetConfig_AddDns_FullMethodName         = "/api.NetConfig/AddDns"
	NetConfig_DeleteDns_FullMethodName      = "/api.NetConfig/DeleteDns"
	NetConfig_UpdateHostname_FullMethodName = "/api.NetConfig/UpdateHostname"
	NetConfig_GetAllDns_FullMethodName      = "/api.NetConfig/GetAllDns"
)

// NetConfigClient is the client API for NetConfig service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NetConfigClient interface {
	AddDns(ctx context.Context, in *AddDNSRequest, opts ...grpc.CallOption) (*Empty, error)
	DeleteDns(ctx context.Context, in *DeleteDNSRequst, opts ...grpc.CallOption) (*Empty, error)
	UpdateHostname(ctx context.Context, in *UpdateHostnameRequest, opts ...grpc.CallOption) (*Empty, error)
	GetAllDns(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DnsListResponse, error)
}

type netConfigClient struct {
	cc grpc.ClientConnInterface
}

func NewNetConfigClient(cc grpc.ClientConnInterface) NetConfigClient {
	return &netConfigClient{cc}
}

func (c *netConfigClient) AddDns(ctx context.Context, in *AddDNSRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetConfig_AddDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netConfigClient) DeleteDns(ctx context.Context, in *DeleteDNSRequst, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetConfig_DeleteDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netConfigClient) UpdateHostname(ctx context.Context, in *UpdateHostnameRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, NetConfig_UpdateHostname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *netConfigClient) GetAllDns(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*DnsListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DnsListResponse)
	err := c.cc.Invoke(ctx, NetConfig_GetAllDns_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NetConfigServer is the server API for NetConfig service.
// All implementations must embed UnimplementedNetConfigServer
// for forward compatibility
type NetConfigServer interface {
	AddDns(context.Context, *AddDNSRequest) (*Empty, error)
	DeleteDns(context.Context, *DeleteDNSRequst) (*Empty, error)
	UpdateHostname(context.Context, *UpdateHostnameRequest) (*Empty, error)
	GetAllDns(context.Context, *Empty) (*DnsListResponse, error)
	mustEmbedUnimplementedNetConfigServer()
}

// UnimplementedNetConfigServer must be embedded to have forward compatible implementations.
type UnimplementedNetConfigServer struct {
}

func (UnimplementedNetConfigServer) AddDns(context.Context, *AddDNSRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDns not implemented")
}
func (UnimplementedNetConfigServer) DeleteDns(context.Context, *DeleteDNSRequst) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDns not implemented")
}
func (UnimplementedNetConfigServer) UpdateHostname(context.Context, *UpdateHostnameRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateHostname not implemented")
}
func (UnimplementedNetConfigServer) GetAllDns(context.Context, *Empty) (*DnsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDns not implemented")
}
func (UnimplementedNetConfigServer) mustEmbedUnimplementedNetConfigServer() {}

// UnsafeNetConfigServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NetConfigServer will
// result in compilation errors.
type UnsafeNetConfigServer interface {
	mustEmbedUnimplementedNetConfigServer()
}

func RegisterNetConfigServer(s grpc.ServiceRegistrar, srv NetConfigServer) {
	s.RegisterService(&NetConfig_ServiceDesc, srv)
}

func _NetConfig_AddDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDNSRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetConfigServer).AddDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetConfig_AddDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetConfigServer).AddDns(ctx, req.(*AddDNSRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetConfig_DeleteDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDNSRequst)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetConfigServer).DeleteDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetConfig_DeleteDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetConfigServer).DeleteDns(ctx, req.(*DeleteDNSRequst))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetConfig_UpdateHostname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateHostnameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetConfigServer).UpdateHostname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetConfig_UpdateHostname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetConfigServer).UpdateHostname(ctx, req.(*UpdateHostnameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _NetConfig_GetAllDns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NetConfigServer).GetAllDns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: NetConfig_GetAllDns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NetConfigServer).GetAllDns(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// NetConfig_ServiceDesc is the grpc.ServiceDesc for NetConfig service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NetConfig_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.NetConfig",
	HandlerType: (*NetConfigServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDns",
			Handler:    _NetConfig_AddDns_Handler,
		},
		{
			MethodName: "DeleteDns",
			Handler:    _NetConfig_DeleteDns_Handler,
		},
		{
			MethodName: "UpdateHostname",
			Handler:    _NetConfig_UpdateHostname_Handler,
		},
		{
			MethodName: "GetAllDns",
			Handler:    _NetConfig_GetAllDns_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "netconfig.proto",
}
